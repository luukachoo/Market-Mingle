// Generated by view binder compiler. Do not edit!
package com.feature.live_match_details.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;

import com.feature.live_match_details.R;
import com.google.android.material.imageview.ShapeableImageView;

import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPlayersBinding implements ViewBinding {
    @NonNull
    public final Guideline guideline;
    @NonNull
    public final ShapeableImageView ivPlayerFirst;
    @NonNull
    public final ShapeableImageView ivPlayerSecond;
    @NonNull
    public final AppCompatTextView tvPlayerFirstNationality;
    @NonNull
    public final AppCompatTextView tvPlayerFirstUsername;
    @NonNull
    public final AppCompatTextView tvPlayerSecondNationality;
    @NonNull
    public final AppCompatTextView tvPlayerSecondUsername;
    @NonNull
    private final ConstraintLayout rootView;

    private ItemPlayersBinding(@NonNull ConstraintLayout rootView, @NonNull Guideline guideline,
                               @NonNull ShapeableImageView ivPlayerFirst, @NonNull ShapeableImageView ivPlayerSecond,
                               @NonNull AppCompatTextView tvPlayerFirstNationality,
                               @NonNull AppCompatTextView tvPlayerFirstUsername,
                               @NonNull AppCompatTextView tvPlayerSecondNationality,
                               @NonNull AppCompatTextView tvPlayerSecondUsername) {
        this.rootView = rootView;
        this.guideline = guideline;
        this.ivPlayerFirst = ivPlayerFirst;
        this.ivPlayerSecond = ivPlayerSecond;
        this.tvPlayerFirstNationality = tvPlayerFirstNationality;
        this.tvPlayerFirstUsername = tvPlayerFirstUsername;
        this.tvPlayerSecondNationality = tvPlayerSecondNationality;
        this.tvPlayerSecondUsername = tvPlayerSecondUsername;
    }

    @NonNull
    public static ItemPlayersBinding inflate(@NonNull LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    @NonNull
    public static ItemPlayersBinding inflate(@NonNull LayoutInflater inflater,
                                             @Nullable ViewGroup parent, boolean attachToParent) {
        View root = inflater.inflate(R.layout.item_players, parent, false);
        if (attachToParent) {
            parent.addView(root);
        }
        return bind(root);
    }

    @NonNull
    public static ItemPlayersBinding bind(@NonNull View rootView) {
        // The body of this method is generated in a way you would not otherwise write.
        // This is done to optimize the compiled bytecode for size and performance.
        int id;
        missingId:
        {
            id = R.id.guideline;
            Guideline guideline = ViewBindings.findChildViewById(rootView, id);
            if (guideline == null) {
                break missingId;
            }

            id = R.id.ivPlayerFirst;
            ShapeableImageView ivPlayerFirst = ViewBindings.findChildViewById(rootView, id);
            if (ivPlayerFirst == null) {
                break missingId;
            }

            id = R.id.ivPlayerSecond;
            ShapeableImageView ivPlayerSecond = ViewBindings.findChildViewById(rootView, id);
            if (ivPlayerSecond == null) {
                break missingId;
            }

            id = R.id.tvPlayerFirstNationality;
            AppCompatTextView tvPlayerFirstNationality = ViewBindings.findChildViewById(rootView, id);
            if (tvPlayerFirstNationality == null) {
                break missingId;
            }

            id = R.id.tvPlayerFirstUsername;
            AppCompatTextView tvPlayerFirstUsername = ViewBindings.findChildViewById(rootView, id);
            if (tvPlayerFirstUsername == null) {
                break missingId;
            }

            id = R.id.tvPlayerSecondNationality;
            AppCompatTextView tvPlayerSecondNationality = ViewBindings.findChildViewById(rootView, id);
            if (tvPlayerSecondNationality == null) {
                break missingId;
            }

            id = R.id.tvPlayerSecondUsername;
            AppCompatTextView tvPlayerSecondUsername = ViewBindings.findChildViewById(rootView, id);
            if (tvPlayerSecondUsername == null) {
                break missingId;
            }

            return new ItemPlayersBinding((ConstraintLayout) rootView, guideline, ivPlayerFirst,
                    ivPlayerSecond, tvPlayerFirstNationality, tvPlayerFirstUsername,
                    tvPlayerSecondNationality, tvPlayerSecondUsername);
        }
        String missingId = rootView.getResources().getResourceName(id);
        throw new NullPointerException("Missing required view with ID: ".concat(missingId));
    }

    @Override
    @NonNull
    public ConstraintLayout getRoot() {
        return rootView;
    }
}
